function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)
%GRADIENTDESCENT Performs gradient descent to learn theta
%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by 
%   taking num_iters gradient steps with learning rate alpha

% Initialize some useful values
m = length(y); % number of training examples
J_history = zeros(num_iters, 1);

for iter = 1:num_iters

    % ====================== YOUR CODE HERE ======================
    % Instructions: Perform a single gradient step on the parameter vector
    %               theta. 
    %
    % Hint: While debugging, it can be useful to print out the values
    %       of the cost function (computeCost) and gradient here.
    %
    temp0 = 0
    temp1 = 0
    for i = 1:m
        hypothesis = (theta.')*(X(i,:).')
        temp0 = temp0 +(hypothesis - y(i))* X(i,0)
        temp1 = temp1 + (hypothesis - y(i))* X(i,1)
    delta0 = (1./m)*temp0
    delta1 = (1./m)*temp1
    delta0_alpha = alpha*delta0
    % Save the cost J in every iteration    
    J_history(iter) = computeCost(X, y, theta);

end

end
